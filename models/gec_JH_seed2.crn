directive simulation {plots=[x; grow; luxRa; luxR; lasRa; c12; c6; lasR; tetRa; tetR; lacIa; lacI]; multicore=True; }
directive simulator sundials
directive deterministic {stiff=true}
directive parameters [
  C6 = 0;
  C12 = 0;
  Ara = 0;
  tau = 0;
  ATC = 0;
  IPTG = 0;
  c0 = 0.002;
  a530 = 7.77644836639743, {interval=Log; distribution=TruncatedNormal(8.1705,0.23079157263643044,0.001,1000); variation=Random};
  a480 = 267.6613063764853, {interval=Log; distribution=TruncatedNormal(268,0.8065048046980261,0.001,1000); variation=Random};
  dCFP = 0.36556133778850874, {interval=Log; distribution=TruncatedNormal(0.36075,0.023479725296518362,0.001,1); variation=Random};
  dYFP = 0.15468986550187477, {interval=Log; distribution=TruncatedNormal(0.11325,0.0057740800133008,0.001,1); variation=Random};
  KR6 = 0.0010087992064444179, {interval=Log; distribution=TruncatedNormal(0.25775865500000006,0.37494735276977703,1E-08,1); variation=Random};
  KS6 = 1.704208186995872E-07, {interval=Log; distribution=TruncatedNormal(0.08585587283999999,0.24175921875046041,1E-08,1); variation=Random};
  KR12 = 1.0015042572339286E-08, {interval=Log; distribution=TruncatedNormal(0.07718009041500001,0.22757697441725674,1E-08,1); variation=Random};
  KS12 = 0.9275773548141764, {interval=Log; distribution=TruncatedNormal(0.6072475877600001,0.35033582306043953,1E-08,1); variation=Random};
  nR = 0.6431235450660826, {interval=Real; distribution=TruncatedNormal(0.70885,0.10507602105142759,0.5,2); variation=Random};
  nS = 0.5000625242545207, {interval=Real; distribution=TruncatedNormal(0.5070999999999999,0.01519885454566045,0.5,2); variation=Random};
  aR100 = 1, {interval=Log; distribution=Uniform(1,100); variation=Random};
  aR33 = 6.830258461608877, {interval=Log; distribution=TruncatedNormal(12.008,4.111102406897696,1,100); variation=Random};
  aS32 = 1, {interval=Log; distribution=Uniform(1,100); variation=Random};
  aS175 = 14.873832319686665, {interval=Log; distribution=TruncatedNormal(5.387,1.428023459191061,1,100); variation=Random};
  dR = 3.265445826024259, {interval=Log; distribution=TruncatedNormal(66.96,18.707682913712258,0.01,100); variation=Random};
  dS = 2.3649141100045727, {interval=Log; distribution=TruncatedNormal(84.99000000000001,14.298492927578032,0.01,100); variation=Random};
  e76 = 0.010405796209672438, {interval=Log; distribution=TruncatedNormal(0.03169000000000001,0.005151771539965568,0.0001,1); variation=Random};
  KGR_76 = 0.34646004249633555, {interval=Log; distribution=TruncatedNormal(91.513565,172.88528341976735,0.0001,1000); variation=Random};
  KGS_76 = 6.992071761355094E-08, {interval=Log; distribution=TruncatedNormal(19.5547,82.01873935699084,1E-08,1000); variation=Random};
  e81 = 0.01345908343787217, {interval=Log; distribution=TruncatedNormal(0.020200000000000003,0.0004413388720699071,0.0001,1); variation=Random};
  KGR_81 = 0.005777514040917309, {interval=Log; distribution=TruncatedNormal(32.967576189999996,107.4704276266773,1E-08,1000); variation=Random};
  KGS_81 = 0.015266622032937311, {interval=Log; distribution=TruncatedNormal(19.422882,12.519468132456588,0.0001,1000); variation=Random};
  aCFP = 18528.347143308893, {interval=Log; distribution=TruncatedNormal(37720,2547.6754110365,100,1000000); variation=Random};
  aYFP = 14421.249531671698, {interval=Log; distribution=TruncatedNormal(24885,3704.0855821646455,100,1000000); variation=Random};
  dCFP = 0.36556133778850874, {interval=Log; distribution=TruncatedNormal(0.36075,0.023479725296518362,0.001,1); variation=Random};
  dYFP = 0.15468986550187477, {interval=Log; distribution=TruncatedNormal(0.11325,0.0057740800133008,0.001,1); variation=Random};
  aL = 445.510789596049, {interval=Log; distribution=Uniform(0.01,1000); variation=Random};
  aT = 334.4303529807008, {interval=Log; distribution=Uniform(0.01,1000); variation=Random};
  dL = 0.04457403613881031, {interval=Log; distribution=Uniform(0.001,10); variation=Random};
  dT = 7.739630159619019, {interval=Log; distribution=Uniform(0.001,10); variation=Random};
  nL = 0.871515342778625, {interval=Real; distribution=Uniform(0.5,4); variation=Random};
  nT = 2.1313123804003604, {interval=Real; distribution=Uniform(0.5,4); variation=Random};
  iA = 2.6149098711798295, {interval=Log; distribution=Uniform(0.01,1000); variation=Random};
  iI = 133.60088977127822, {interval=Log; distribution=Uniform(0.01,1000); variation=Random};
  frac = 0.9991134077300057, {interval=Real; distribution=Uniform(0,1); variation=Random};
]
directive inference {burnin=200000; samples=200000; thin=200; seed=2; noise_model=proportional; partial=true}


system exrep = { 
directive simulation {final=36; points=250; plots=[(([x] * ([yfp] + [f530])) + exrep.yb0); (([x] * ([cfp] + [f480])) + exrep.cb0)]; plotcolours=["#FFDF00"; "#ADD8E6"]; multicore=True; sweeps=[sweep_R33S175ExRepTet33AAVLac300ND_dataset5; sweep_R33S175ExRepTet33AAVLac300ND_dataset6]; }
directive simulator sundials
directive deterministic {stiff=true}
directive inference {burnin=200000; samples=200000; thin=200; noise_model=proportional; partial=true}
directive sweeps [
  sweep_R33S175ExRepTet33AAVLac300ND_dataset5 = [(EtOH,chlor,C6,C12,ATC,IPTG,exrep.r,exrep.K,exrep.tlag) = [(0,0,5000,5000,0,0,exrep.r_1,exrep.K_1,exrep.tlag_1); (0,0,2500,5000,0,0,exrep.r_2,exrep.K_2,exrep.tlag_2); (0,0,1250,5000,0,0,exrep.r_3,exrep.K_3,exrep.tlag_3); (0,0,625,5000,0,0,exrep.r_4,exrep.K_4,exrep.tlag_4); (0,0,312.5,5000,0,0,exrep.r_5,exrep.K_5,exrep.tlag_5); (0,0,156.25,5000,0,0,exrep.r_6,exrep.K_6,exrep.tlag_6); (0,0,78.125,5000,0,0,exrep.r_7,exrep.K_7,exrep.tlag_7); (0,0,39.0625,5000,0,0,exrep.r_8,exrep.K_8,exrep.tlag_8); (0,0,19.53125,5000,0,0,exrep.r_9,exrep.K_9,exrep.tlag_9); (0,0,9.765625,5000,0,0,exrep.r_10,exrep.K_10,exrep.tlag_10); (0,0,5000,1666.666667,0,0,exrep.r_11,exrep.K_11,exrep.tlag_11); (0,0,2500,1666.666667,0,0,exrep.r_12,exrep.K_12,exrep.tlag_12); (0,0,1250,1666.666667,0,0,exrep.r_13,exrep.K_13,exrep.tlag_13); (0,0,625,1666.666667,0,0,exrep.r_14,exrep.K_14,exrep.tlag_14); (0,0,312.5,1666.666667,0,0,exrep.r_15,exrep.K_15,exrep.tlag_15); (0,0,156.25,1666.666667,0,0,exrep.r_16,exrep.K_16,exrep.tlag_16); (0,0,78.125,1666.666667,0,0,exrep.r_17,exrep.K_17,exrep.tlag_17); (0,0,39.0625,1666.666667,0,0,exrep.r_18,exrep.K_18,exrep.tlag_18); (0,0,19.53125,1666.666667,0,0,exrep.r_19,exrep.K_19,exrep.tlag_19); (0,0,9.765625,1666.666667,0,0,exrep.r_20,exrep.K_20,exrep.tlag_20); (0,0,5000,555.555556,0,0,exrep.r_21,exrep.K_21,exrep.tlag_21); (0,0,2500,555.555556,0,0,exrep.r_22,exrep.K_22,exrep.tlag_22); (0,0,1250,555.555556,0,0,exrep.r_23,exrep.K_23,exrep.tlag_23); (0,0,625,555.555556,0,0,exrep.r_24,exrep.K_24,exrep.tlag_24); (0,0,312.5,555.555556,0,0,exrep.r_25,exrep.K_25,exrep.tlag_25); (0,0,156.25,555.555556,0,0,exrep.r_26,exrep.K_26,exrep.tlag_26); (0,0,78.125,555.555556,0,0,exrep.r_27,exrep.K_27,exrep.tlag_27); (0,0,39.0625,555.555556,0,0,exrep.r_28,exrep.K_28,exrep.tlag_28); (0,0,19.53125,555.555556,0,0,exrep.r_29,exrep.K_29,exrep.tlag_29); (0,0,9.765625,555.555556,0,0,exrep.r_30,exrep.K_30,exrep.tlag_30); (0,0,5000,185.185185,0,0,exrep.r_31,exrep.K_31,exrep.tlag_31); (0,0,2500,185.185185,0,0,exrep.r_32,exrep.K_32,exrep.tlag_32); (0,0,1250,185.185185,0,0,exrep.r_33,exrep.K_33,exrep.tlag_33); (0,0,625,185.185185,0,0,exrep.r_34,exrep.K_34,exrep.tlag_34); (0,0,312.5,185.185185,0,0,exrep.r_35,exrep.K_35,exrep.tlag_35); (0,0,156.25,185.185185,0,0,exrep.r_36,exrep.K_36,exrep.tlag_36); (0,0,78.125,185.185185,0,0,exrep.r_37,exrep.K_37,exrep.tlag_37); (0,0,39.0625,185.185185,0,0,exrep.r_38,exrep.K_38,exrep.tlag_38); (0,0,19.53125,185.185185,0,0,exrep.r_39,exrep.K_39,exrep.tlag_39); (0,0,9.765625,185.185185,0,0,exrep.r_40,exrep.K_40,exrep.tlag_40); (0,0,5000,61.728395,0,0,exrep.r_41,exrep.K_41,exrep.tlag_41); (0,0,2500,61.728395,0,0,exrep.r_42,exrep.K_42,exrep.tlag_42); (0,0,1250,61.728395,0,0,exrep.r_43,exrep.K_43,exrep.tlag_43); (0,0,625,61.728395,0,0,exrep.r_44,exrep.K_44,exrep.tlag_44); (0,0,312.5,61.728395,0,0,exrep.r_45,exrep.K_45,exrep.tlag_45); (0,0,156.25,61.728395,0,0,exrep.r_46,exrep.K_46,exrep.tlag_46); (0,0,78.125,61.728395,0,0,exrep.r_47,exrep.K_47,exrep.tlag_47); (0,0,39.0625,61.728395,0,0,exrep.r_48,exrep.K_48,exrep.tlag_48); (0,0,19.53125,61.728395,0,0,exrep.r_49,exrep.K_49,exrep.tlag_49); (0,0,9.765625,61.728395,0,0,exrep.r_50,exrep.K_50,exrep.tlag_50); (0,0,5000,20.576132,0,0,exrep.r_51,exrep.K_51,exrep.tlag_51); (0,0,2500,20.576132,0,0,exrep.r_52,exrep.K_52,exrep.tlag_52); (0,0,1250,20.576132,0,0,exrep.r_53,exrep.K_53,exrep.tlag_53); (0,0,625,20.576132,0,0,exrep.r_54,exrep.K_54,exrep.tlag_54); (0,0,312.5,20.576132,0,0,exrep.r_55,exrep.K_55,exrep.tlag_55); (0,0,156.25,20.576132,0,0,exrep.r_56,exrep.K_56,exrep.tlag_56); (0,0,78.125,20.576132,0,0,exrep.r_57,exrep.K_57,exrep.tlag_57); (0,0,39.0625,20.576132,0,0,exrep.r_58,exrep.K_58,exrep.tlag_58); (0,0,19.53125,20.576132,0,0,exrep.r_59,exrep.K_59,exrep.tlag_59); (0,0,9.765625,20.576132,0,0,exrep.r_60,exrep.K_60,exrep.tlag_60)]];
  sweep_R33S175ExRepTet33AAVLac300ND_dataset6 = [(EtOH,chlor,C6,C12,ATC,IPTG,exrep.r,exrep.K,exrep.tlag) = [(0,0,10000,10000,200,1,exrep.r_61,exrep.K_61,exrep.tlag_61); (0,0,10000,10000,200,0.333333,exrep.r_62,exrep.K_62,exrep.tlag_62); (0,0,10000,10000,200,0.111111,exrep.r_63,exrep.K_63,exrep.tlag_63); (0,0,10000,10000,200,0.037037,exrep.r_64,exrep.K_64,exrep.tlag_64); (0,0,10000,10000,200,0.012346,exrep.r_65,exrep.K_65,exrep.tlag_65); (0,0,10000,10000,100,1,exrep.r_66,exrep.K_66,exrep.tlag_66); (0,0,10000,10000,50,1,exrep.r_67,exrep.K_67,exrep.tlag_67); (0,0,10000,10000,25,1,exrep.r_68,exrep.K_68,exrep.tlag_68); (0,0,10000,10000,12.5,1,exrep.r_69,exrep.K_69,exrep.tlag_69); (0,0,10000,10000,6.25,1,exrep.r_70,exrep.K_70,exrep.tlag_70); (0,0,2000,10000,200,1,exrep.r_71,exrep.K_71,exrep.tlag_71); (0,0,2000,10000,200,0.333333,exrep.r_72,exrep.K_72,exrep.tlag_72); (0,0,2000,10000,200,0.111111,exrep.r_73,exrep.K_73,exrep.tlag_73); (0,0,2000,10000,200,0.037037,exrep.r_74,exrep.K_74,exrep.tlag_74); (0,0,2000,10000,200,0.012346,exrep.r_75,exrep.K_75,exrep.tlag_75); (0,0,10000,2000,100,1,exrep.r_76,exrep.K_76,exrep.tlag_76); (0,0,10000,2000,50,1,exrep.r_77,exrep.K_77,exrep.tlag_77); (0,0,10000,2000,25,1,exrep.r_78,exrep.K_78,exrep.tlag_78); (0,0,10000,2000,12.5,1,exrep.r_79,exrep.K_79,exrep.tlag_79); (0,0,10000,2000,6.25,1,exrep.r_80,exrep.K_80,exrep.tlag_80); (0,0,400,10000,200,1,exrep.r_81,exrep.K_81,exrep.tlag_81); (0,0,400,10000,200,0.333333,exrep.r_82,exrep.K_82,exrep.tlag_82); (0,0,400,10000,200,0.111111,exrep.r_83,exrep.K_83,exrep.tlag_83); (0,0,400,10000,200,0.037037,exrep.r_84,exrep.K_84,exrep.tlag_84); (0,0,400,10000,200,0.012346,exrep.r_85,exrep.K_85,exrep.tlag_85); (0,0,10000,400,100,1,exrep.r_86,exrep.K_86,exrep.tlag_86); (0,0,10000,400,50,1,exrep.r_87,exrep.K_87,exrep.tlag_87); (0,0,10000,400,25,1,exrep.r_88,exrep.K_88,exrep.tlag_88); (0,0,10000,400,12.5,1,exrep.r_89,exrep.K_89,exrep.tlag_89); (0,0,10000,400,6.25,1,exrep.r_90,exrep.K_90,exrep.tlag_90); (0,0,80,10000,200,1,exrep.r_91,exrep.K_91,exrep.tlag_91); (0,0,80,10000,200,0.333333,exrep.r_92,exrep.K_92,exrep.tlag_92); (0,0,80,10000,200,0.111111,exrep.r_93,exrep.K_93,exrep.tlag_93); (0,0,80,10000,200,0.037037,exrep.r_94,exrep.K_94,exrep.tlag_94); (0,0,80,10000,200,0.012346,exrep.r_95,exrep.K_95,exrep.tlag_95); (0,0,10000,80,100,1,exrep.r_96,exrep.K_96,exrep.tlag_96); (0,0,10000,80,50,1,exrep.r_97,exrep.K_97,exrep.tlag_97); (0,0,10000,80,25,1,exrep.r_98,exrep.K_98,exrep.tlag_98); (0,0,10000,80,12.5,1,exrep.r_99,exrep.K_99,exrep.tlag_99); (0,0,10000,80,6.25,1,exrep.r_100,exrep.K_100,exrep.tlag_100); (0,0,16,10000,200,1,exrep.r_101,exrep.K_101,exrep.tlag_101); (0,0,16,10000,200,0.333333,exrep.r_102,exrep.K_102,exrep.tlag_102); (0,0,16,10000,200,0.111111,exrep.r_103,exrep.K_103,exrep.tlag_103); (0,0,16,10000,200,0.037037,exrep.r_104,exrep.K_104,exrep.tlag_104); (0,0,16,10000,200,0.012346,exrep.r_105,exrep.K_105,exrep.tlag_105); (0,0,10000,16,100,1,exrep.r_106,exrep.K_106,exrep.tlag_106); (0,0,10000,16,50,1,exrep.r_107,exrep.K_107,exrep.tlag_107); (0,0,10000,16,25,1,exrep.r_108,exrep.K_108,exrep.tlag_108); (0,0,10000,16,12.5,1,exrep.r_109,exrep.K_109,exrep.tlag_109); (0,0,10000,16,6.25,1,exrep.r_110,exrep.K_110,exrep.tlag_110)]];
]
directive data [R33S175ExRepTet33AAVLac300ND_EYFP_ECFP_proc_R33S175ExrepTet33AAVLac300ND_Hires; R33S175ExRepTet33AAVLac300ND_EYFP_ECFP_proc_R33S175ExrepTet33AAVLac300ND_IPTGATC_titration]
directive rates [
  P76 = (((e76 + (KGR_76 * [boundLuxR])) + (KGS_76 * [boundLasR])) / ((1 + (KGR_76 * [boundLuxR])) + (KGS_76 * [boundLasR])));
  P76a = (((e76 + (KGR_76 * [boundLuxRa])) + (KGS_76 * [boundLasRa])) / ((1 + (KGR_76 * [boundLuxRa])) + (KGS_76 * [boundLasRa])));
  P76combined = ((frac * [P76]) + ((1 - frac) * [P76a]));
  P81 = (((e81 + (KGR_81 * [boundLuxR])) + (KGS_81 * [boundLasR])) / ((1 + (KGR_81 * [boundLuxR])) + (KGS_81 * [boundLasR])));
  P81a = (((e81 + (KGR_81 * [boundLuxRa])) + (KGS_81 * [boundLasRa])) / ((1 + (KGR_81 * [boundLuxRa])) + (KGS_81 * [boundLasRa])));
  P81combined = ((frac * [P81]) + ((1 - frac) * [P81a]));
  PLac = (1 / (1 + ([lacI] ^ nL)));
  PLaca = (1 / (1 + ([lacIa] ^ nL)));
  PTet = (1 / (1 + ([tetR] ^ nT)));
  PTeta = (1 / (1 + ([tetRa] ^ nT)));
  boundLasR = (([lasR] ^ 2) * (((KS6 * [c6]) ^ nS) + ((KS12 * [c12]) ^ nS)));
  boundLasRa = (([lasRa] ^ 2) * (((KS6 * [c6]) ^ nS) + ((KS12 * [c12]) ^ nS)));
  boundLuxR = (([luxR] ^ 2) * (((KR6 * [c6]) ^ nR) + ((KR12 * [c12]) ^ nR)));
  boundLuxRa = (([luxRa] ^ 2) * (((KR6 * [c6]) ^ nR) + ((KR12 * [c12]) ^ nR)));
  exrep.growth = (([grow] * exrep.r) * (1 - ([x] / exrep.K)))
]

| c0 x
| 1 grow @ exrep.tlag
| C6 c6 @ tau
| C12 c12 @ tau
| exrep.lacI0 lacI
| exrep.luxR0 luxR
| exrep.tetR0 tetRa
| exrep.lasR0 lasRa
| ->[([exrep.growth] * [x])] x
| ->{a530} f530
| f530 ->[([exrep.growth] * [f530])]
| ->{a480} f480
| f480 ->[([exrep.growth] * [f480])]
| ->[(aR33 * [PTet])] luxR
| luxR ->{dR}
| luxR ->[([exrep.growth] * [luxR])]
| ->[(aS175 * [PLac])] lasR
| lasR ->{dS}
| lasR ->[([exrep.growth] * [lasR])]
| ->[(aT * [P81])] tetR
| tetR ->{dT}
| tetR ->[([exrep.growth] * [tetR])]
| tetR ->[((iA * ATC) * [tetR])]
| ->[(aL * [P76])] lacI
| lacI ->[([exrep.growth] * [lacI])]
| lacI ->{dL}
| lacI ->[((iI * IPTG) * [lacI])]
| ->[(aR33 * [PTeta])] luxRa
| luxRa ->{dR}
| luxRa ->[([exrep.growth] * [luxRa])]
| ->[(aS175 * [PLaca])] lasRa
| lasRa ->{dS}
| lasRa ->[([exrep.growth] * [lasRa])]
| ->[(aT * [P81a])] tetRa
| tetRa ->{dT}
| tetRa ->[([exrep.growth] * [tetRa])]
| tetRa ->[((iA * ATC) * [tetRa])]
| ->[(aL * [P76a])] lacIa
| lacIa ->[([exrep.growth] * [lacIa])]
| lacIa ->{dL}
| lacIa ->[((iI * IPTG) * [lacIa])]
| ->[(aYFP * [P81combined])] yfp
| yfp ->{dYFP}
| yfp ->[([exrep.growth] * [yfp])]
| ->[(aCFP * [P76combined])] cfp
| cfp ->{dCFP}
| cfp ->[([exrep.growth] * [cfp])]
}